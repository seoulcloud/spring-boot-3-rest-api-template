name: Build Jar & Deploy Docker to EC2

on:
  push:
    branches: [ main ]   # main 브랜치에 푸시될 때 워크플로우 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 코드 내려받기
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설치 (Gradle 빌드에 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          
      # 3.Gradle 권한생성 > 빌드 실행 (jar 생성)
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build
        # build/libs 디렉토리에 jar 파일 생성됨

      # 4. SSH 에이전트 실행 및 private key 등록
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      # 5. 완성된 jar 파일과 Dockerfile EC2로 복사
      - name: Copy Jar to EC2
        run: |
          scp -o StrictHostKeyChecking=no build/libs/*.jar ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app/
          scp Dockerfile ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app/
      # 6. EC2에 접속해서 Docker 이미지 빌드 및 컨테이너 실행

      - name: install Docker if not installed # 도커 설치가 안되었을때 설치 진행
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
            command -v docker >/dev/null 2>&1 || (
            sudo apt update
            sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt update
            sudo apt install -y docker-ce
            sudo usermod -aG docker ubuntu
            )
          newgrp docker
          EOF

      
      - name: Build and Run Docker on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
            cd /home/ubuntu/app

            # 기존에 실행 중인 컨테이너 있으면 중지 및 삭제
            docker stop myapp || true
            docker rm myapp || true

            # Dockerfile 기준으로 이미지 빌드 (현재 디렉토리 Dockerfile 참고)
            docker build -t myapp:latest .

            # 새 이미지로 컨테이너 실행 (포트 8080 노출)
            docker run -d --name myapp -p 8080:8080 myapp:latest
          EOF
